<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init

is_inited = false;

sound_ready_map = ds_map_create();
sound_stream_map = ds_map_create();

to_play_sound_info_map = ds_map_create();

sound_map = ds_map_create();
sound_filename_map = ds_map_create();

pitch_map = ds_map_create();
volume_map = ds_map_create();

alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 재생중이지 않는 오디오 체크하여 제거

var to_remove_sound_ids = ds_list_create();
var uuid = ds_map_find_first(sound_map);
for (var i = 0; i &lt; ds_map_size(sound_map); i += 1) {
    if (os_type == os_ios) {
        if (native_daps_audio_is_playing(ds_map_find_value(sound_map, uuid)) != true) {
            ds_list_add(to_remove_sound_ids, uuid);
        }
    } else if (os_type == os_android) {
        if (audio_is_playing(ds_map_find_value(sound_map, uuid)) != true) {
            ds_list_add(to_remove_sound_ids, uuid);
        }
    }
    uuid = ds_map_find_next(sound_map, uuid);
}

for (var i = 0; i &lt; ds_list_size(to_remove_sound_ids); i += 1) {
    var uuid2 = ds_list_find_value(to_remove_sound_ids, i);
    ds_map_delete(sound_map, uuid2);
    ds_map_delete(sound_filename_map, uuid2);
}
ds_list_destroy(to_remove_sound_ids);

alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 사운드 파일 준비 완료

if (ds_map_find_value(async_load, 'type') == '__SOUND_READY') {
    var filename = ds_map_find_value(async_load, 'filename');
    if (os_type == os_android) {
        ds_map_add(sound_stream_map, filename, audio_create_stream(ds_map_find_value(async_load, 'path')));
    }
    
    // 재생해야 할 사운드 재생
    if (ds_map_exists(to_play_sound_info_map, filename) == true) {
        var to_play_sound_infos = ds_map_find_value(to_play_sound_info_map, filename);
        
        if (os_type == os_ios) {
            for (var i = 0; i &lt; ds_list_size(to_play_sound_infos); i += 1) {
                var info = ds_list_find_value(to_play_sound_infos, i);
                var sound = native_daps_audio_play_sound(filename, ds_map_find_value(info, 'loop'));
                if (ds_map_exists(volume_map, filename) == true) {
                    audio_sound_gain(sound, ds_map_find_value(volume_map, filename), 0);
                }
                ds_map_add(sound_map, ds_map_find_value(info, 'id'), sound);
                ds_map_add(sound_filename_map, ds_map_find_value(info, 'id'), filename);
                ds_map_destroy(info);
            }
        }
        
        else if (os_type == os_android) {
            for (var i = 0; i &lt; ds_list_size(to_play_sound_infos); i += 1) {
                var info = ds_list_find_value(to_play_sound_infos, i);
                var sound = audio_play_sound(ds_map_find_value(sound_stream_map, filename), 1, ds_map_find_value(info, 'loop'));
                if (ds_map_exists(volume_map, filename) == true) {
                    audio_sound_gain(sound, ds_map_find_value(volume_map, filename), 0);
                }
                ds_map_add(sound_map, ds_map_find_value(info, 'id'), sound);
                ds_map_add(sound_filename_map, ds_map_find_value(info, 'id'), filename);
                ds_map_destroy(info);
            }
        }
        
        ds_list_clear(to_play_sound_infos);
    }
    
    ds_map_replace(sound_ready_map, filename, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
